
trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: azure_credential  

stages:
  - stage: Terraform_Deploy
    displayName: 'Terraform Apply'
    jobs:
      - job: Terraform
        displayName: 'Run Terraform'
        timeoutInMinutes: 10
        steps:
          - checkout: self

          # Install Terraform
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: 'latest'
            displayName: 'Install Terraform'

          # Azure Login using Service Connection
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'azure-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az account show
            displayName: 'Azure Login'

          # Initialize Terraform
          - script: |
              terraform init
            displayName: 'Terraform Init'
            workingDirectory: $(Build.SourcesDirectory)/Project_2/terraform/

          # Validate Terraform configuration
          - script: |
              terraform validate
            displayName: 'Terraform Validate'
            workingDirectory: $(Build.SourcesDirectory)/Project_2/terraform/

          # Import the existing resource group if it already exists
          - script: |
              export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
              export ARM_CLIENT_ID=$(CLIENT_ID)
              export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
              export ARM_TENANT_ID=$(TENANT_ID)

              terraform import azurerm_resource_group.rg /subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/RG1
            displayName: 'Terraform Import RG1'
            workingDirectory: $(Build.SourcesDirectory)/Project_2/terraform/

          # Run Terraform Plan
          - script: |
              terraform plan -out=tfplan \
                -var "SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID" \
                -var "CLIENT_ID=$ARM_CLIENT_ID" \
                -var "CLIENT_SECRET=$ARM_CLIENT_SECRET" \
                -var "TENANT_ID=$ARM_TENANT_ID"
            displayName: 'Terraform Plan'
            workingDirectory: $(Build.SourcesDirectory)/Project_2/terraform/

          # Apply Terraform changes
          - script: |
              terraform apply -auto-approve tfplan
            displayName: 'Terraform Apply'
            workingDirectory: $(Build.SourcesDirectory)/Project_2/terraform/



























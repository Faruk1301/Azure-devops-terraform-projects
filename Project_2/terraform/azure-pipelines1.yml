trigger:
  branches:
    include:
      - main

variables:
- group: azure_credential
- name: TF_VERSION
  value: '1.6.6'
- name: RESOURCE_GROUP_NAME
  value: 'my-vnet-rg'
- name: VNET_NAME
  value: 'my-vnet'
- name: LOCATION
  value: 'eastus'

pool:
  vmImage: 'ubuntu-latest'
  timeoutInMinutes: 30

stages:
- stage: Deploy
  jobs:
  - job: Terraform
    steps:
    - checkout: self
    
    - bash: |
        echo "##[group]Verify Files"
        cd $(Build.SourcesDirectory)/Project_2/terraform
        pwd
        ls -la
        echo "##[endgroup]"
      displayName: 'Verify Terraform Files'

    - task: TerraformInstaller@1
      inputs:
        terraformVersion: '$(TF_VERSION)'
      displayName: 'Install Terraform'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure-sc'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: '$(Build.SourcesDirectory)/Project_2/terraform'
        failOnStderr: true
        inlineScript: |
          set -exo pipefail
          echo "##[group]Azure Authentication"
          export ARM_CLIENT_ID=$(CLIENT_ID)
          export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
          export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
          export ARM_TENANT_ID=$(TENANT_ID)
          echo "##[endgroup]"

          echo "##[group]Terraform Init"
          terraform init -no-color -input=false
          echo "##[endgroup]"

          echo "##[group]Terraform Validate"
          terraform validate -no-color
          echo "##[endgroup]"

          echo "##[group]Terraform Apply"
          terraform apply -auto-approve -no-color -input=false \
            -var="resource_group_name=$(RESOURCE_GROUP_NAME)" \
            -var="vnet_name=$(VNET_NAME)" \
            -var="location=$(LOCATION)"
          echo "##[endgroup]"
      displayName: 'Deploy VNet'




         
























